import inquirer from 'inquirer';
import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';
import chalk from 'chalk';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

interface ProjectAnswers {
  projectName: string;
  template: 'basic' | 'server' | 'full';
  network: 'devnet' | 'testnet' | 'mainnet';
  initGit: boolean;
}

export async function createProject(): Promise<void> {
  try {
    // Get project details from user
    const answers = await inquirer.prompt<ProjectAnswers>([
      {
        type: 'input',
        name: 'projectName',
        message: 'What is your project named?',
        default: 'my-atxp-app',
        validate: (input: string) => {
          if (!input.trim()) return 'Project name is required';
          if (!/^[a-zA-Z0-9-_]+$/.test(input)) {
            return 'Project name can only contain letters, numbers, hyphens, and underscores';
          }
          return true;
        }
      },
      {
        type: 'list',
        name: 'template',
        message: 'Choose a template:',
        choices: [
          { name: 'Basic Client Demo (CLI client example)', value: 'basic' },
          { name: 'Server Demo (MCP server with payments)', value: 'server' },
          { name: 'Full Stack Demo (Client + Server)', value: 'full' }
        ],
        default: 'basic'
      },
      {
        type: 'list',
        name: 'network',
        message: 'Which Solana network?',
        choices: [
          { name: 'Devnet (for testing)', value: 'devnet' },
          { name: 'Testnet', value: 'testnet' },
          { name: 'Mainnet', value: 'mainnet' }
        ],
        default: 'devnet'
      },
      {
        type: 'confirm',
        name: 'initGit',
        message: 'Initialize git repository?',
        default: true
      }
    ]);

    const { projectName, template, network, initGit } = answers;
    const projectPath = path.resolve(process.cwd(), projectName);

    // Check if directory already exists
    if (await fs.pathExists(projectPath)) {
      console.error(chalk.red(`‚ùå Directory "${projectName}" already exists`));
      process.exit(1);
    }

    console.log(chalk.blue(`üìÅ Creating project at ${projectPath}`));

    // Create project directory
    await fs.ensureDir(projectPath);

    // Copy template files
    const templatePath = path.join(__dirname, '..', 'template', template);
    if (await fs.pathExists(templatePath)) {
      await fs.copy(templatePath, projectPath);
    } else {
      // Fallback to basic template
      await fs.copy(path.join(__dirname, '..', 'template', 'basic'), projectPath);
    }

    // Create .env file with network-specific settings
    const envContent = generateEnvFile(network);
    await fs.writeFile(path.join(projectPath, '.env'), envContent);

    // Update package.json with project name
    const packageJsonPath = path.join(projectPath, 'package.json');
    if (await fs.pathExists(packageJsonPath)) {
      const packageJson = await fs.readJson(packageJsonPath) as any;
      packageJson.name = projectName;
      await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 });
    }

    // Initialize git if requested
    if (initGit) {
      const { execSync } = await import('child_process');
      try {
        execSync('git init', { cwd: projectPath, stdio: 'ignore' });
        console.log(chalk.green('‚úÖ Git repository initialized'));
      } catch (error) {
        console.log(chalk.yellow('‚ö†Ô∏è  Could not initialize git repository'));
      }
    }

    console.log(chalk.green('\nüéâ Project created successfully!'));
    console.log(chalk.blue('\nNext steps:'));
    console.log(chalk.white(`  cd ${projectName}`));
    console.log(chalk.white('  npm install'));
    console.log(chalk.white('  npm start'));
    console.log(chalk.yellow('\n‚ö†Ô∏è  Remember to set your SOLANA_PRIVATE_KEY in the .env file!'));

  } catch (error) {
    console.error(chalk.red('‚ùå Error creating project:'), (error as Error).message);
    process.exit(1);
  }
}

function generateEnvFile(network: 'devnet' | 'testnet' | 'mainnet'): string {
  const endpoints = {
    devnet: 'https://api.devnet.solana.com',
    testnet: 'https://api.testnet.solana.com',
    mainnet: 'https://api.mainnet-beta.solana.com'
  };

  return `# ATXP Environment Configuration
# Generated by npm create atxp

# Solana Configuration
SOLANA_ENDPOINT=${endpoints[network]}
SOLANA_PRIVATE_KEY=your_private_key_here

# ATXP Configuration
ATXP_AUTH_CLIENT_TOKEN=your_auth_token_here

# Environment
NODE_ENV=development
DEBUG=1

# Add your private key and auth token above
# Never commit this file to version control!
`;
}
